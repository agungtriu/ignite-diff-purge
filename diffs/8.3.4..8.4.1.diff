diff --git a/IgniteDiffApp/app.json b/IgniteDiffApp/app.json
index 9b188e9..25cd0af 100644
--- a/IgniteDiffApp/app.json
+++ b/IgniteDiffApp/app.json
@@ -4,6 +4,7 @@
   "expo": {
     "name": "IgniteDiffApp",
     "slug": "IgniteDiffApp",
+    "scheme": "ignitediffapp",
     "version": "1.0.0",
     "orientation": "portrait",
     "icon": "./assets/images/app-icon-all.png",
diff --git a/IgniteDiffApp/app/app.tsx b/IgniteDiffApp/app/app.tsx
index d21d6e8..718c626 100644
--- a/IgniteDiffApp/app/app.tsx
+++ b/IgniteDiffApp/app/app.tsx
@@ -14,6 +14,7 @@ import "./utils/ignoreWarnings"
 import { useFonts } from "expo-font"
 import React from "react"
 import { initialWindowMetrics, SafeAreaProvider } from "react-native-safe-area-context"
+import * as Linking from "expo-linking"
 import { useInitialRootStore } from "./models"
 import { AppNavigator, useNavigationPersistence } from "./navigators"
 import { ErrorBoundary } from "./screens/ErrorScreen/ErrorBoundary"
@@ -39,6 +40,27 @@ setupReactotron({
 
 export const NAVIGATION_PERSISTENCE_KEY = "NAVIGATION_STATE"
 
+// Web linking configuration
+const prefix = Linking.createURL("/")
+const config = {
+  screens: {
+    Login: {
+      path: "",
+    },
+    Welcome: "welcome",
+    Demo: {
+      screens: {
+        DemoShowroom: {
+          path: "showroom/:queryIndex?/:itemIndex?",
+        },
+        DemoDebug: "debug",
+        DemoPodcastList: "podcast",
+        DemoCommunity: "community",
+      },
+    },
+  },
+}
+
 interface AppProps {
   hideSplashScreen: () => Promise<void>
 }
@@ -74,11 +96,17 @@ function App(props: AppProps) {
   // You can replace with your own loading component if you wish.
   if (!rehydrated || !isNavigationStateRestored || !areFontsLoaded) return null
 
+  const linking = {
+    prefixes: [prefix],
+    config,
+  }
+
   // otherwise, we're ready to render the app
   return (
     <SafeAreaProvider initialMetrics={initialWindowMetrics}>
       <ErrorBoundary catchErrors={Config.catchErrors}>
         <AppNavigator
+          linking={linking}
           initialState={initialNavigationState}
           onStateChange={onNavigationStateChange}
         />
diff --git a/IgniteDiffApp/app/components/Header.tsx b/IgniteDiffApp/app/components/Header.tsx
index cbcaf42..28afc1d 100644
--- a/IgniteDiffApp/app/components/Header.tsx
+++ b/IgniteDiffApp/app/components/Header.tsx
@@ -7,11 +7,11 @@ import {
   View,
   ViewStyle,
 } from "react-native"
-import { Edge, SafeAreaView, SafeAreaViewProps } from "react-native-safe-area-context"
+import { isRTL, translate } from "../i18n"
 import { colors, spacing } from "../theme"
+import { ExtendedEdge, useSafeAreaInsetsStyle } from "../utils/useSafeAreaInsetsStyle"
 import { Icon, IconTypes } from "./Icon"
 import { Text, TextProps } from "./Text"
-import { isRTL, translate } from "../i18n"
 
 export interface HeaderProps {
   /**
@@ -25,7 +25,11 @@ export interface HeaderProps {
    */
   titleStyle?: StyleProp<TextStyle>
   /**
-   * Optional header style override.
+   * Optional inner header wrapper style override.
+   */
+  style?: StyleProp<ViewStyle>
+  /**
+   * Optional outer header container style override.
    */
   containerStyle?: StyleProp<ViewStyle>
   /**
@@ -114,11 +118,7 @@ export interface HeaderProps {
   /**
    * Override the default edges for the safe area.
    */
-  safeAreaEdges?: Edge[]
-  /**
-   * Pass any additional props directly to the SafeAreaView component.
-   */
-  SafeAreaViewProps?: SafeAreaViewProps
+  safeAreaEdges?: ExtendedEdge[]
 }
 
 interface HeaderActionProps {
@@ -134,7 +134,7 @@ interface HeaderActionProps {
 
 /**
  * Header that appears on many screens. Will hold navigation buttons and screen title.
- * The Header is meant to be used with the `screenOptions.header` option on navigators,routes, or screen components via `navigation.setOptions({ header })`.
+ * The Header is meant to be used with the `screenOptions.header` option on navigators, routes, or screen components via `navigation.setOptions({ header })`.
  *
  * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Header.md)
  */
@@ -156,26 +156,22 @@ export function Header(props: HeaderProps) {
     rightTx,
     rightTxOptions,
     safeAreaEdges = ["top"],
-    SafeAreaViewProps,
     title,
     titleMode = "center",
     titleTx,
     titleTxOptions,
+    style: $styleOverride,
     titleStyle: $titleStyleOverride,
     containerStyle: $containerStyleOverride,
   } = props
 
-  const Wrapper = safeAreaEdges?.length ? SafeAreaView : View
+  const $containerInsets = useSafeAreaInsetsStyle(safeAreaEdges)
 
   const titleContent = titleTx ? translate(titleTx, titleTxOptions) : title
 
   return (
-    <Wrapper
-      edges={safeAreaEdges}
-      {...SafeAreaViewProps}
-      style={[$safeArea, SafeAreaViewProps?.style, { backgroundColor }]}
-    >
-      <View style={[$container, $containerStyleOverride]}>
+    <View style={[$container, $containerInsets, { backgroundColor }, $containerStyleOverride]}>
+      <View style={[$wrapper, $styleOverride]}>
         <HeaderAction
           tx={leftTx}
           text={leftText}
@@ -211,7 +207,7 @@ export function Header(props: HeaderProps) {
           ActionComponent={RightActionComponent}
         />
       </View>
-    </Wrapper>
+    </View>
   )
 }
 
@@ -251,17 +247,17 @@ function HeaderAction(props: HeaderActionProps) {
   return <View style={[$actionFillerContainer, { backgroundColor }]} />
 }
 
-const $safeArea: ViewStyle = {
-  width: "100%",
-}
-
-const $container: ViewStyle = {
+const $wrapper: ViewStyle = {
   height: 56,
   flexDirection: "row",
   alignItems: "center",
   justifyContent: "space-between",
 }
 
+const $container: ViewStyle = {
+  width: "100%",
+}
+
 const $centerTitle: TextStyle = {
   position: "absolute",
   width: "100%",
diff --git a/IgniteDiffApp/app/components/Screen.tsx b/IgniteDiffApp/app/components/Screen.tsx
index c3c46b3..9f209bf 100644
--- a/IgniteDiffApp/app/components/Screen.tsx
+++ b/IgniteDiffApp/app/components/Screen.tsx
@@ -1,3 +1,5 @@
+import { useScrollToTop } from "@react-navigation/native"
+import { StatusBar, StatusBarProps } from "expo-status-bar"
 import React, { useRef, useState } from "react"
 import {
   KeyboardAvoidingView,
@@ -10,10 +12,8 @@ import {
   View,
   ViewStyle,
 } from "react-native"
-import { StatusBar, StatusBarProps } from "expo-status-bar"
-import { Edge, useSafeAreaInsets } from "react-native-safe-area-context"
-import { useScrollToTop } from "@react-navigation/native"
 import { colors } from "../theme"
+import { ExtendedEdge, useSafeAreaInsetsStyle } from "../utils/useSafeAreaInsetsStyle"
 
 interface BaseScreenProps {
   /**
@@ -31,7 +31,7 @@ interface BaseScreenProps {
   /**
    * Override the default edges for the safe area.
    */
-  safeAreaEdges?: Edge[]
+  safeAreaEdges?: ExtendedEdge[]
   /**
    * Background color
    */
@@ -137,18 +137,6 @@ function useAutoPreset(props: AutoScreenProps) {
   }
 }
 
-function useSafeAreaInsetPadding(safeAreaEdges?: Edge[]) {
-  const insets = useSafeAreaInsets()
-
-  const insetStyles: ViewStyle = {}
-  safeAreaEdges?.forEach((edge: Edge) => {
-    const paddingProp = `padding${edge.charAt(0).toUpperCase()}${edge.slice(1)}`
-    insetStyles[paddingProp] = insets[edge]
-  })
-
-  return insetStyles
-}
-
 function ScreenWithoutScrolling(props: ScreenProps) {
   const { style, contentContainerStyle, children } = props
   return (
@@ -209,10 +197,10 @@ export function Screen(props: ScreenProps) {
     statusBarStyle = "dark",
   } = props
 
-  const insetPadding = useSafeAreaInsetPadding(safeAreaEdges)
+  const $containerInsets = useSafeAreaInsetsStyle(safeAreaEdges)
 
   return (
-    <View style={[$containerStyle, { backgroundColor }, insetPadding]}>
+    <View style={[$containerStyle, { backgroundColor }, $containerInsets]}>
       <StatusBar style={statusBarStyle} {...StatusBarProps} />
 
       <KeyboardAvoidingView
diff --git a/IgniteDiffApp/app/navigators/DemoNavigator.tsx b/IgniteDiffApp/app/navigators/DemoNavigator.tsx
index c0d985b..49e8036 100644
--- a/IgniteDiffApp/app/navigators/DemoNavigator.tsx
+++ b/IgniteDiffApp/app/navigators/DemoNavigator.tsx
@@ -12,7 +12,7 @@ import { AppStackParamList, AppStackScreenProps } from "./AppNavigator"
 
 export type DemoTabParamList = {
   DemoCommunity: undefined
-  DemoShowroom: undefined
+  DemoShowroom: { queryIndex?: string; itemIndex?: string }
   DemoDebug: undefined
   DemoPodcastList: undefined
 }
diff --git a/IgniteDiffApp/app/navigators/navigationUtilities.ts b/IgniteDiffApp/app/navigators/navigationUtilities.ts
index 5305a01..f6bd493 100644
--- a/IgniteDiffApp/app/navigators/navigationUtilities.ts
+++ b/IgniteDiffApp/app/navigators/navigationUtilities.ts
@@ -8,7 +8,7 @@ import {
 } from "@react-navigation/native"
 import Config from "../config"
 import type { PersistNavigationConfig } from "../config/config.base"
-import { useIsMounted } from "../utils/isMounted"
+import { useIsMounted } from "../utils/useIsMounted"
 
 /* eslint-disable */
 export const RootNavigation = {
diff --git a/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoShowroomScreen.tsx b/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoShowroomScreen.tsx
index 42e8b45..7e796de 100644
--- a/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoShowroomScreen.tsx
+++ b/IgniteDiffApp/app/screens/DemoShowroomScreen/DemoShowroomScreen.tsx
@@ -1,12 +1,23 @@
+import { Link, RouteProp, useRoute } from "@react-navigation/native"
 import React, { FC, ReactElement, useEffect, useRef, useState } from "react"
-import { FlatList, Image, ImageStyle, SectionList, TextStyle, View, ViewStyle } from "react-native"
+import {
+  Dimensions,
+  FlatList,
+  Image,
+  ImageStyle,
+  Platform,
+  SectionList,
+  TextStyle,
+  View,
+  ViewStyle,
+} from "react-native"
 import { DrawerLayout, DrawerState } from "react-native-gesture-handler"
-import { useSharedValue } from "react-native-reanimated"
-import { SafeAreaView } from "react-native-safe-area-context"
+import { useSharedValue, withTiming } from "react-native-reanimated"
 import { ListItem, Screen, Text } from "../../components"
 import { isRTL } from "../../i18n"
-import { DemoTabScreenProps } from "../../navigators/DemoNavigator"
+import { DemoTabParamList, DemoTabScreenProps } from "../../navigators/DemoNavigator"
 import { colors, spacing } from "../../theme"
+import { useSafeAreaInsetsStyle } from "../../utils/useSafeAreaInsetsStyle"
 import * as Demos from "./demos"
 import { DrawerIconButton } from "./DrawerIconButton"
 
@@ -18,6 +29,61 @@ export interface Demo {
   data: ReactElement[]
 }
 
+interface DemoListItem {
+  item: { name: string; useCases: string[] }
+  sectionIndex: number
+  handleScroll?: (sectionIndex: number, itemIndex?: number) => void
+}
+
+const slugify = (str) =>
+  str
+    .toLowerCase()
+    .trim()
+    .replace(/[^\w\s-]/g, "")
+    .replace(/[\s_-]+/g, "-")
+    .replace(/^-+|-+$/g, "")
+
+const WebListItem: FC<DemoListItem> = ({ item, sectionIndex }) => {
+  const sectionSlug = item.name.toLowerCase()
+
+  return (
+    <View>
+      <Link to={`/showroom/${sectionSlug}`} style={$menuContainer}>
+        <Text preset="bold">{item.name}</Text>
+      </Link>
+      {item.useCases.map((u) => {
+        const itemSlug = slugify(u)
+
+        return (
+          <Link key={`section${sectionIndex}-${u}`} to={`/showroom/${sectionSlug}/${itemSlug}`}>
+            <Text>{u}</Text>
+          </Link>
+        )
+      })}
+    </View>
+  )
+}
+
+const NativeListItem: FC<DemoListItem> = ({ item, sectionIndex, handleScroll }) => {
+  return (
+    <View>
+      <Text onPress={() => handleScroll(sectionIndex)} preset="bold" style={$menuContainer}>
+        {item.name}
+      </Text>
+      {item.useCases.map((u, index) => (
+        <ListItem
+          key={`section${sectionIndex}-${u}`}
+          onPress={() => handleScroll(sectionIndex, index + 1)}
+          text={u}
+          rightIcon={isRTL ? "caretLeft" : "caretRight"}
+        />
+      ))}
+    </View>
+  )
+}
+
+const ShowroomListItem = Platform.select({ web: WebListItem, default: NativeListItem })
+
 export const DemoShowroomScreen: FC<DemoTabScreenProps<"DemoShowroom">> =
   function DemoShowroomScreen(_props) {
     const [open, setOpen] = useState(false)
@@ -26,6 +92,30 @@ export const DemoShowroomScreen: FC<DemoTabScreenProps<"DemoShowroom">> =
     const listRef = useRef<SectionList>()
     const menuRef = useRef<FlatList>()
     const progress = useSharedValue(0)
+    const route = useRoute<RouteProp<DemoTabParamList, "DemoShowroom">>()
+    const params = route.params
+
+    // handle Web links
+    React.useEffect(() => {
+      if (route.params) {
+        const demoValues = Object.values(Demos)
+        const findSectionIndex = demoValues.findIndex(
+          (x) => x.name.toLowerCase() === params.queryIndex,
+        )
+        let findItemIndex = 0
+        if (params.itemIndex) {
+          try {
+            findItemIndex =
+              demoValues[findSectionIndex].data.findIndex(
+                (u) => slugify(u.props.name) === params.itemIndex,
+              ) + 1
+          } catch (err) {
+            console.error(err)
+          }
+        }
+        handleScroll(findSectionIndex, findItemIndex)
+      }
+    }, [route])
 
     const toggleDrawer = () => {
       if (!open) {
@@ -67,10 +157,12 @@ export const DemoShowroomScreen: FC<DemoTabScreenProps<"DemoShowroom">> =
       return () => timeout.current && clearTimeout(timeout.current)
     }, [])
 
+    const $drawerInsets = useSafeAreaInsetsStyle(["top"])
+
     return (
       <DrawerLayout
         ref={drawerRef}
-        drawerWidth={326}
+        drawerWidth={Platform.select({ default: 326, web: Dimensions.get("screen").width * 0.3 })}
         drawerType={"slide"}
         drawerPosition={isRTL ? "right" : "left"}
         drawerBackgroundColor={colors.palette.neutral100}
@@ -80,11 +172,14 @@ export const DemoShowroomScreen: FC<DemoTabScreenProps<"DemoShowroom">> =
         }}
         onDrawerStateChanged={(newState: DrawerState, drawerWillShow: boolean) => {
           if (newState === "Settling") {
+            progress.value = withTiming(drawerWillShow ? 1 : 0, {
+              duration: 250,
+            })
             setOpen(drawerWillShow)
           }
         }}
         renderNavigationView={() => (
-          <SafeAreaView style={$drawer} edges={["top"]}>
+          <View style={[$drawer, $drawerInsets]}>
             <View style={$logoContainer}>
               <Image source={logo} style={$logoImage} />
             </View>
@@ -98,33 +193,13 @@ export const DemoShowroomScreen: FC<DemoTabScreenProps<"DemoShowroom">> =
               }))}
               keyExtractor={(item) => item.name}
               renderItem={({ item, index: sectionIndex }) => (
-                <View>
-                  <Text
-                    onPress={() => handleScroll(sectionIndex)}
-                    preset="bold"
-                    style={$menuContainer}
-                  >
-                    {item.name}
-                  </Text>
-                  {item.useCases.map((u, index) => (
-                    <ListItem
-                      key={`section${sectionIndex}-${u}`}
-                      onPress={() => handleScroll(sectionIndex, index + 1)}
-                      text={u}
-                      rightIcon={isRTL ? "caretLeft" : "caretRight"}
-                    />
-                  ))}
-                </View>
+                <ShowroomListItem {...{ item, sectionIndex, handleScroll }} />
               )}
             />
-          </SafeAreaView>
+          </View>
         )}
       >
-        <Screen
-          preset="fixed"
-          safeAreaEdges={["top", "bottom"]}
-          contentContainerStyle={$screenContainer}
-        >
+        <Screen preset="fixed" safeAreaEdges={["top"]} contentContainerStyle={$screenContainer}>
           <DrawerIconButton onPress={toggleDrawer} {...{ open, progress }} />
 
           <SectionList
diff --git a/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoHeader.tsx b/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoHeader.tsx
index 2ead507..98e8ecc 100644
--- a/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoHeader.tsx
+++ b/IgniteDiffApp/app/screens/DemoShowroomScreen/demos/DemoHeader.tsx
@@ -97,10 +97,10 @@ export const DemoHeader: Demo = {
       <Header title="Styled Title" titleStyle={$customTitle} safeAreaEdges={[]} />
       <DemoDivider size={24} />
       <Header
-        title="Styled Container"
+        title="Styled Wrapper"
         titleStyle={$customWhiteTitle}
         backgroundColor={colors.error}
-        containerStyle={{ height: 35 }}
+        style={{ height: 35 }}
         safeAreaEdges={[]}
       />
       <DemoDivider size={24} />
diff --git a/IgniteDiffApp/app/screens/WelcomeScreen.tsx b/IgniteDiffApp/app/screens/WelcomeScreen.tsx
index f1324ac..271c422 100644
--- a/IgniteDiffApp/app/screens/WelcomeScreen.tsx
+++ b/IgniteDiffApp/app/screens/WelcomeScreen.tsx
@@ -1,19 +1,16 @@
 import { observer } from "mobx-react-lite"
-import React, {
-  FC,
-  useLayoutEffect, // @demo remove-current-line
-} from "react"
+import React, { FC } from "react"
 import { Image, ImageStyle, TextStyle, View, ViewStyle } from "react-native"
-import { SafeAreaView } from "react-native-safe-area-context"
 import {
   Button, // @demo remove-current-line
-  Header, // @demo remove-current-line
   Text,
 } from "../components"
 import { isRTL } from "../i18n"
 import { useStores } from "../models" // @demo remove-current-line
 import { AppStackScreenProps } from "../navigators" // @demo remove-current-line
 import { colors, spacing } from "../theme"
+import { useHeader } from "../utils/useHeader" // @demo remove-current-line
+import { useSafeAreaInsetsStyle } from "../utils/useSafeAreaInsetsStyle"
 
 const welcomeLogo = require("../../assets/images/logo.png")
 const welcomeFace = require("../../assets/images/welcome-face.png")
@@ -33,14 +30,14 @@ export const WelcomeScreen: FC<WelcomeScreenProps> = observer(function WelcomeSc
     navigation.navigate("Demo", { screen: "DemoShowroom" })
   }
 
-  useLayoutEffect(() => {
-    navigation.setOptions({
-      headerShown: true,
-      header: () => <Header rightTx="common.logOut" onRightPress={logout} />,
-    })
-  }, [])
+  useHeader({
+    rightTx: "common.logOut",
+    onRightPress: logout,
+  })
   // @demo remove-block-end
 
+  const $bottomContainerInsets = useSafeAreaInsetsStyle(["bottom"])
+
   return (
     <View style={$container}>
       <View style={$topContainer}>
@@ -55,19 +52,17 @@ export const WelcomeScreen: FC<WelcomeScreenProps> = observer(function WelcomeSc
         <Image style={$welcomeFace} source={welcomeFace} resizeMode="contain" />
       </View>
 
-      <SafeAreaView style={$bottomContainer} edges={["bottom"]}>
-        <View style={$bottomContentContainer}>
-          <Text tx="welcomeScreen.postscript" size="md" />
-          {/* @demo remove-block-start */}
-          <Button
-            testID="next-screen-button"
-            preset="reversed"
-            tx="welcomeScreen.letsGo"
-            onPress={goNext}
-          />
-          {/* @demo remove-block-end */}
-        </View>
-      </SafeAreaView>
+      <View style={[$bottomContainer, $bottomContainerInsets]}>
+        <Text tx="welcomeScreen.postscript" size="md" />
+        {/* @demo remove-block-start */}
+        <Button
+          testID="next-screen-button"
+          preset="reversed"
+          tx="welcomeScreen.letsGo"
+          onPress={goNext}
+        />
+        {/* @demo remove-block-end */}
+      </View>
     </View>
   )
 })
@@ -92,14 +87,9 @@ const $bottomContainer: ViewStyle = {
   backgroundColor: colors.palette.neutral100,
   borderTopLeftRadius: 16,
   borderTopRightRadius: 16,
-}
-
-const $bottomContentContainer: ViewStyle = {
-  flex: 1,
   paddingHorizontal: spacing.large,
   justifyContent: "space-around",
 }
-
 const $welcomeLogo: ImageStyle = {
   height: 88,
   width: "100%",
diff --git a/IgniteDiffApp/app/utils/useHeader.tsx b/IgniteDiffApp/app/utils/useHeader.tsx
new file mode 100644
index 0000000..0243cb8
--- /dev/null
+++ b/IgniteDiffApp/app/utils/useHeader.tsx
@@ -0,0 +1,19 @@
+import React, { useLayoutEffect } from "react"
+import { useNavigation } from "@react-navigation/native"
+import { Header, HeaderProps } from "../components"
+
+/**
+ * A hook that can be used to easily set the Header of a react-navigation screen from within the screen's component.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Utils-useHeader.md)
+ */
+export function useHeader(headerProps: HeaderProps, deps: any[] = []) {
+  const navigation = useNavigation()
+
+  useLayoutEffect(() => {
+    navigation.setOptions({
+      headerShown: true,
+      header: () => <Header {...headerProps} />,
+    })
+  }, deps)
+}
diff --git a/IgniteDiffApp/app/utils/isMounted.ts b/IgniteDiffApp/app/utils/useIsMounted.ts
similarity index 100%
rename from IgniteDiffApp/app/utils/isMounted.ts
rename to IgniteDiffApp/app/utils/useIsMounted.ts
diff --git a/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts b/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
new file mode 100644
index 0000000..5d4fd19
--- /dev/null
+++ b/IgniteDiffApp/app/utils/useSafeAreaInsetsStyle.ts
@@ -0,0 +1,44 @@
+import { FlexStyle } from "react-native"
+import { Edge, useSafeAreaInsets } from "react-native-safe-area-context"
+
+export type ExtendedEdge = Edge | "start" | "end"
+
+const propertySuffixMap = {
+  top: "Top",
+  bottom: "Bottom",
+  left: "Start",
+  right: "End",
+  start: "Start",
+  end: "End",
+}
+
+const edgeInsetMap = {
+  start: "left",
+  end: "right",
+}
+
+/**
+ * A hook that can be used to create a safe-area-aware style object that can be passed directly to a View.
+ *
+ * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Utils-useSafeAreaInsetsStyle.md)
+ */
+export function useSafeAreaInsetsStyle(
+  safeAreaEdges: ExtendedEdge[] = [],
+  property: "padding" | "margin" = "padding",
+): Pick<
+  FlexStyle,
+  | "marginBottom"
+  | "marginEnd"
+  | "marginStart"
+  | "marginTop"
+  | "paddingBottom"
+  | "paddingEnd"
+  | "paddingStart"
+  | "paddingTop"
+> {
+  const insets = useSafeAreaInsets()
+
+  return safeAreaEdges.reduce((acc, e) => {
+    return { ...acc, [`${property}${propertySuffixMap[e]}`]: insets[edgeInsetMap[e] ?? e] }
+  }, {})
+}
diff --git a/IgniteDiffApp/package.json b/IgniteDiffApp/package.json
index 90dbe58..15dcb32 100644
--- a/IgniteDiffApp/package.json
+++ b/IgniteDiffApp/package.json
@@ -51,6 +51,7 @@
     "expo-device": "~4.3.0",
     "expo-file-system": "~14.1.0",
     "expo-font": "~10.2.0",
+    "expo-linking": "^3.2.3",
     "expo-localization": "13.1.0",
     "expo-modules-core": "~0.11.3",
     "expo-splash-screen": "~0.16.1",
@@ -125,7 +126,8 @@
   },
   "resolutions": {
     "@types/react": "^17",
-    "@types/react-dom": "^17"
+    "@types/react-dom": "^17",
+    "@expo/dev-server": "0.1.120"
   },
   "prettier": {
     "printWidth": 100,
diff --git a/IgniteDiffApp/yarn.lock b/IgniteDiffApp/yarn.lock
index 0a4b9b3..d96fe81 100644
--- a/IgniteDiffApp/yarn.lock
+++ b/IgniteDiffApp/yarn.lock
@@ -1329,21 +1329,18 @@
     xcode "^3.0.0"
     xml-js "^1.6.11"
 
-"@expo/dev-server@~0.1.120":
-  version "0.1.123"
-  resolved "https://registry.yarnpkg.com/@expo/dev-server/-/dev-server-0.1.123.tgz#71304323b47db9ce300b9a774571ef2312b9d581"
-  integrity sha512-N6UVzzeemfX0AONUSWInvkAAbqon8hRXpyYE/nMPaC6TvAmgGY5ILZAGoXwlpxwY2VKNT0Lx4s/UJ53ytIaHbA==
+"@expo/dev-server@0.1.120", "@expo/dev-server@~0.1.120":
+  version "0.1.120"
+  resolved "https://registry.yarnpkg.com/@expo/dev-server/-/dev-server-0.1.120.tgz#0c7aff4e29d98298214129127f5df951cb7b81dd"
+  integrity sha512-x5/jCv0EOpz6FyehXpI5bgDQTVsGZYvgISkAw7n60RhtG+aid6N2CCR9SDMCH70XaUpFnfTW9qvderpCEj7Puw==
   dependencies:
     "@expo/bunyan" "4.0.0"
-    "@expo/metro-config" "~0.5.1"
+    "@expo/metro-config" "~0.4.0"
     "@expo/osascript" "2.0.33"
-    "@expo/spawn-async" "^1.5.0"
     body-parser "1.19.0"
     chalk "^4.0.0"
     connect "^3.7.0"
     fs-extra "9.0.0"
-    is-docker "^2.0.0"
-    is-wsl "^2.1.1"
     node-fetch "^2.6.0"
     open "^8.3.0"
     resolve-from "^5.0.0"
@@ -1427,20 +1424,6 @@
     resolve-from "^5.0.0"
     sucrase "^3.20.0"
 
-"@expo/metro-config@~0.5.1":
-  version "0.5.1"
-  resolved "https://registry.yarnpkg.com/@expo/metro-config/-/metro-config-0.5.1.tgz#58c715041e1773ad653519535c017138bfc766de"
-  integrity sha512-Rvy4ZFgKNDfXO401z2OQF8fWbPj1lLVDL4GF1aqCIhCDHCKrezbwB0xejpcUyndJRCxBL2BMAM+P24t6cKv9Fw==
-  dependencies:
-    "@expo/config" "~7.0.2"
-    "@expo/json-file" "8.2.36"
-    chalk "^4.1.0"
-    debug "^4.3.2"
-    find-yarn-workspace-root "~2.0.0"
-    getenv "^1.0.0"
-    resolve-from "^5.0.0"
-    sucrase "^3.20.0"
-
 "@expo/ngrok-bin-darwin-ia32@2.2.8":
   version "2.2.8"
   resolved "https://registry.yarnpkg.com/@expo/ngrok-bin-darwin-ia32/-/ngrok-bin-darwin-ia32-2.2.8.tgz#46ed6d485a87396acf4af317beeaab7a1f607315"
@@ -2834,6 +2817,11 @@
   resolved "https://registry.yarnpkg.com/@types/q/-/q-1.5.5.tgz#75a2a8e7d8ab4b230414505d92335d1dcb53a6df"
   integrity sha512-L28j2FcJfSZOnL1WBjDYp2vUHCeIFlyYI/53EwD/rKUBQ7MtUUfbQWiyKJGpcnv4/WgrhWsFKrcPstcAt/J0tQ==
 
+"@types/qs@^6.5.3":
+  version "6.9.7"
+  resolved "https://registry.yarnpkg.com/@types/qs/-/qs-6.9.7.tgz#63bb7d067db107cc1e457c303bc25d511febf6cb"
+  integrity sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==
+
 "@types/react-dom@^17":
   version "17.0.18"
   resolved "https://registry.yarnpkg.com/@types/react-dom/-/react-dom-17.0.18.tgz#8f7af38f5d9b42f79162eea7492e5a1caff70dc2"
@@ -6676,6 +6664,17 @@ expo-keep-awake@~10.2.0:
   resolved "https://registry.yarnpkg.com/expo-keep-awake/-/expo-keep-awake-10.2.1.tgz#af6d6f7f08cc2a01d6c728c36c5419060006d98d"
   integrity sha512-UBge1BwzDPhUFX0gKu9eDLwEFj4LGiqrOogNoEYxcosM1SwhkbWwPrd3zZtl53LLz02TxEi/CI/MUGJJsrVQLw==
 
+expo-linking@^3.2.3:
+  version "3.2.3"
+  resolved "https://registry.yarnpkg.com/expo-linking/-/expo-linking-3.2.3.tgz#7b493a7fea2aadafc88a42e2fc6a5a4ba6d47df9"
+  integrity sha512-PgiWCao9TecLOPdtWyiNSY+UQGAwdjFx4KbHd1YsF0KnM1CJ2idcaHpDRlQPWSNmDebUZYN461/dVtJi9b2krg==
+  dependencies:
+    "@types/qs" "^6.5.3"
+    expo-constants "~14.0.0"
+    invariant "^2.2.4"
+    qs "^6.9.1"
+    url-parse "^1.5.9"
+
 expo-localization@13.1.0:
   version "13.1.0"
   resolved "https://registry.yarnpkg.com/expo-localization/-/expo-localization-13.1.0.tgz#a69eac5dfee3f1e7b3a443bdd61fd38de5e4e28b"
@@ -12815,7 +12814,7 @@ qrcode-terminal@0.11.0:
   resolved "https://registry.yarnpkg.com/qrcode-terminal/-/qrcode-terminal-0.11.0.tgz#ffc6c28a2fc0bfb47052b47e23f4f446a5fbdb9e"
   integrity sha512-Uu7ii+FQy4Qf82G4xu7ShHhjhGahEpCWc3x8UavY3CTcWV+ufmmCtwkr7ZKsX42jdL0kr1B5FKUeqJvAn51jzQ==
 
-qs@6.11.0, qs@^6.5.1:
+qs@6.11.0, qs@^6.5.1, qs@^6.9.1:
   version "6.11.0"
   resolved "https://registry.yarnpkg.com/qs/-/qs-6.11.0.tgz#fd0d963446f7a65e1367e01abd85429453f0c37a"
   integrity sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==
